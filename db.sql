-- -- Part1
-- IF DB_ID(N'TGP') IS NOT NULL
--     DROP DATABASE TGP1;
-- GO
-- CREATE DATABASE TGP COLLATE Chinese_PRC_CI_AS;
-- GO
USE TGP;
GO
-- CREATE TABLE DimTime(
--     date_key DATE PRIMARY KEY,
--     [quarter] TINYINT NOT NULL CHECK([quarter] BETWEEN 1 AND 4),
--     [month] TINYINT NOT NULL CHECK([month] BETWEEN 1 AND 12),
--     year_month AS (
--         CAST([year] AS CHAR(4)) + '-' +
--         RIGHT('0' + CAST([month] AS VARCHAR(2)), 2)
--     ) PERSISTED,
--     month_start BIT NOT NULL DEFAULT 0
-- );

-- CREATE TABLE DimRegion(
--     region_id INT IDENTITY(1,1) PRIMARY KEY,
--     region_name NVARCHAR(100) NOT NULL,
--     region_level TINYINT NOT NULL CHECK(region_level BETWEEN 0 AND 5),
--     parent_region_id INT NULL REFERENCES DimRegion(region_id)
-- );
-- CREATE UNIQUE INDEX UX_DimRegion_Name_Level
--         ON DimRegion(region_name, region_level);

-- CREATE TABLE DimRegionGroup(
--     region_group_id TINYINT PRIMARY KEY,
--     group_name NVARCHAR(20) NOT NULL UNIQUE
-- );

-- CREATE TABLE Bridge_Region_Group(
--     region_id INT NOT NULL REFERENCES DimRegion(region_id),
--     region_group_id TINYINT NOT NULL REFERENCES DimRegionGroup(region_group_id),
--     PRIMARY KEY(region_id, region_group_id)
-- );

-- CREATE TABLE DimCountry(
--     country_id INT IDENTITY(1,1) PRIMARY KEY,
--     country_name NVARCHAR(100) NOT NULL UNIQUE
-- );

-- CREATE TABLE FactGDP(
--     region_id INT NOT NULL REFERENCES DimRegion(region_id),
--     date_key DATE NOT NULL REFERENCES DimTime(date_key),
--     gdp_value DECIMAL(18,2) NOT NULL,
--     PRIMARY KEY(region_id, date_key)
-- );
-- CREATE INDEX IX_FactGDP_DateRegion ON FactGDP(date_key, region_id);

-- CREATE TABLE FactDemographics(
--     region_id INT NOT NULL REFERENCES DimRegion(region_id),
--     date_key DATE NOT NULL REFERENCES DimTime(date_key),
--     population BIGINT NOT NULL,
--     area_km2 DECIMAL(18,2) NULL,
--     PRIMARY KEY(region_id, date_key)
-- );
-- CREATE INDEX IX_Demo_DateRegion ON FactDemographics(date_key, region_id);

-- CREATE TABLE FactTrade(
--     region_id INT NOT NULL REFERENCES DimRegion(region_id),
--     partner_country_id INT NOT NULL REFERENCES DimCountry(country_id),
--     date_key DATE NOT NULL REFERENCES DimTime(date_key),
--     exports_value DECIMAL(18,2) NULL,
--     imports_value DECIMAL(18,2) NULL,
--     PRIMARY KEY(region_id, partner_country_id, date_key)
-- );
-- CREATE INDEX IX_Trade_Date_RegionCountry
--         ON FactTrade(date_key, region_id, partner_country_id);
-- CREATE TABLE Result_PerCapitaGDP_Ranking(
--     analysis_id INT IDENTITY(1,1) PRIMARY KEY,
--     region_id INT NOT NULL REFERENCES DimRegion(region_id),
--     date_key DATE NOT NULL REFERENCES DimTime(date_key),
--     per_capita_gdp DECIMAL(18,2) NOT NULL,
--     rank_in_date INT NOT NULL,
--     created_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME()
-- );

-- CREATE TABLE Result_ExportContribution(
--     analysis_id INT IDENTITY(1,1) PRIMARY KEY,
--     region_group_id TINYINT NOT NULL REFERENCES DimRegionGroup(region_group_id),
--     date_from DATE NOT NULL,
--     date_to DATE NOT NULL,
--     contribution DECIMAL(10,4) NOT NULL,
--     compare_flag CHAR(1) NOT NULL CHECK(compare_flag IN('>','=','<')),
--     created_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME()
-- );

-- -- Part2

-- USE TGP;
-- GO

-- ;WITH Months AS (
--     SELECT DISTINCT [月度标识] AS ym
--     FROM dbo.StagingNationalTradeMonthly
--     WHERE [月度标识] IS NOT NULL
-- ), Parsed AS (
--     SELECT 
--       EOMONTH(CAST(ym + '-01' AS DATE)) AS dm
--     FROM Months
--     -- 可加 TRY_CONVERT 验证格式
-- )
-- INSERT INTO dbo.DimTime(date_key, [year], [quarter], [month])
-- SELECT
--     dm AS date_key,
--     YEAR(dm),
--     DATEPART(QUARTER, dm),
--     MONTH(dm)
-- FROM Parsed P
-- WHERE NOT EXISTS (
--     SELECT 1 FROM dbo.DimTime DT 
--     WHERE DT.date_key = P.dm
-- );
-- GO

-- ;WITH Months AS (
--     SELECT DISTINCT [月度标识] AS ym
--     FROM dbo.StagingNationalTradeMonthly
--     WHERE [月度标识] IS NOT NULL
-- ), ParsedStart AS (
--     SELECT CAST(ym + '-01' AS DATE) AS dstart
--     FROM Months
-- )
-- INSERT INTO dbo.DimTime(date_key, [year], [quarter], [month], month_start)
-- SELECT
--     dstart,
--     YEAR(dstart),
--     DATEPART(QUARTER, dstart),
--     MONTH(dstart),
--     1
-- FROM ParsedStart P
-- WHERE NOT EXISTS (
--     SELECT 1 FROM dbo.DimTime DT 
--     WHERE DT.date_key = P.dstart
-- );
-- GO

-- DECLARE @USID INT;
-- SELECT @USID = country_id FROM dbo.DimCountry WHERE country_name = N'United States';
-- IF @USID IS NULL
-- BEGIN
--     INSERT INTO dbo.DimCountry(country_name) VALUES (N'United States');
--     SET @USID = SCOPE_IDENTITY();
-- END

-- DECLARE @AllID INT;
-- SELECT @AllID = country_id FROM dbo.DimCountry WHERE country_name = N'ALL';
-- IF @AllID IS NULL
-- BEGIN
--     INSERT INTO dbo.DimCountry(country_name) VALUES (N'ALL');
--     SET @AllID = SCOPE_IDENTITY();
-- END
-- GO

-- DECLARE @ChinaID INT = (SELECT region_id FROM dbo.DimRegion WHERE region_name=N'中国' AND region_level=0);
-- IF @ChinaID IS NULL
-- BEGIN
--     RAISERROR('DimRegion 中缺少 中国 记录，请先插入。', 16, 1);
--     RETURN;
-- END
-- DECLARE @USID INT = (SELECT country_id FROM dbo.DimCountry WHERE country_name=N'United States');

-- INSERT INTO dbo.FactUSTradeAnnual(region_id, partner_country_id, date_key, category_id, export_value, import_value)
-- SELECT
--     @ChinaID AS region_id,
--     @USID AS partner_country_id,
--     DT.date_key,
--     DC.category_id,
--     S.[出口_亿美元],
--     S.[进口_亿美元]
-- FROM dbo.StagingUSTradeAnnual AS S
-- JOIN dbo.DimCategory AS DC
--   ON DC.category_name = LTRIM(RTRIM(S.[商品分类]))
-- JOIN dbo.DimTime AS DT
--   ON DT.date_key = CAST(CAST(S.[年份] AS VARCHAR(4)) + '-12-31' AS DATE)
-- WHERE S.[商品分类] IS NOT NULL
--   AND S.[年份] IS NOT NULL
--   AND NOT EXISTS (
--       SELECT 1 FROM dbo.FactUSTradeAnnual F
--       WHERE F.region_id=@ChinaID 
--         AND F.partner_country_id=@USID
--         AND F.date_key=DT.date_key
--         AND F.category_id=DC.category_id
--   );
-- GO

-- DECLARE @ChinaID INT = (SELECT region_id FROM dbo.DimRegion WHERE region_name=N'中国' AND region_level=0);
-- DECLARE @AllID INT   = (SELECT country_id FROM dbo.DimCountry WHERE country_name=N'ALL');

-- INSERT INTO dbo.FactTrade(region_id, partner_country_id, date_key, exports_value, imports_value)
-- SELECT
--     @ChinaID,
--     @AllID,
--     DT.date_key,
--     S.[当月出口总额],
--     S.[当月进口总额]
-- FROM dbo.StagingNationalTradeMonthly AS S
-- JOIN dbo.DimTime AS DT
--   ON DT.date_key = EOMONTH(CAST(S.[月度标识] + '-01' AS DATE))
-- WHERE S.[月度标识] IS NOT NULL
--   AND NOT EXISTS (
--     SELECT 1 FROM dbo.FactTrade F
--     WHERE F.region_id=@ChinaID 
--       AND F.partner_country_id=@AllID
--       AND F.date_key=DT.date_key
--   );
-- GO
-- DECLARE @ChinaID INT = (SELECT region_id FROM dbo.DimRegion WHERE region_name=N'中国' AND region_level=0);
-- DECLARE @AllID INT = (SELECT country_id FROM dbo.DimCountry WHERE country_name=N'ALL');
-- -- 全国月度进出口环比增长率（出口占比环比、出口同比等）
-- WITH Monthly AS (
--   SELECT 
--     DT.date_key,
--     DT.year_month,
--     F.exports_value,
--     F.imports_value,
--     F.exports_value - LAG(F.exports_value) OVER(ORDER BY DT.date_key) AS diff_exports,
--     LAG(F.exports_value) OVER(ORDER BY DT.date_key) AS prev_exports,
--     F.imports_value - LAG(F.imports_value) OVER(ORDER BY DT.date_key) AS diff_imports,
--     LAG(F.imports_value) OVER(ORDER BY DT.date_key) AS prev_imports
--   FROM dbo.FactTrade AS F
--   JOIN dbo.DimTime AS DT ON F.date_key = DT.date_key
--   WHERE F.region_id = @ChinaID AND F.partner_country_id = @AllID
-- )

-- SELECT 
--   year_month,
--   exports_value,
--   CASE 
--     WHEN prev_exports IS NULL OR prev_exports = 0 THEN NULL
--     ELSE diff_exports * 1.0 / prev_exports 
--   END AS exports_mom_growth,  -- 月度环比增长率
--   CASE 
--     WHEN LAG(exports_value, 12) OVER(ORDER BY date_key) IS NOT NULL 
--          AND LAG(exports_value, 12) OVER(ORDER BY date_key) <> 0 
--     THEN (exports_value - LAG(exports_value,12) OVER(ORDER BY date_key)) *1.0 
--          / LAG(exports_value,12) OVER(ORDER BY date_key) 
--     ELSE NULL 
--   END AS exports_yoy_growth,  -- 月度同比增长率
--   imports_value,
--   CASE 
--     WHEN prev_imports IS NULL OR prev_imports = 0 THEN NULL
--     ELSE diff_imports * 1.0 / prev_imports 
--   END AS imports_mom_growth,
--   CASE 
--     WHEN LAG(imports_value,12) OVER(ORDER BY date_key) IS NOT NULL 
--          AND LAG(imports_value,12) OVER(ORDER BY date_key) <> 0 
--     THEN (imports_value - LAG(imports_value,12) OVER(ORDER BY date_key)) *1.0 
--          / LAG(imports_value,12) OVER(ORDER BY date_key) 
--     ELSE NULL 
--   END AS imports_yoy_growth
-- FROM Monthly
-- ORDER BY date_key;


-- -- 1.1查询指定时间段GDP最高的区域
-- SELECT TOP 1 DR.region_name, SUM(FG.gdp_value) AS total_gdp
-- FROM dbo.FactGDP FG
-- JOIN dbo.DimRegion DR ON FG.region_id = DR.region_id
-- WHERE FG.date_key BETWEEN '2023-01-31' AND '2023-12-31'
--   AND DR.region_level = 2
-- GROUP BY DR.region_name
-- ORDER BY total_gdp DESC;

-- -- 1.2查询指定区域的地理特征，包括区域面积大小、人口数量、人口密度，等等
-- SELECT DR.region_name, 
--        FD.area_km2, 
--        FD.population, 
--        CAST(FD.population * 1.0 / NULLIF(FD.area_km2, 0) AS DECIMAL(18,2)) AS population_density
-- FROM dbo.FactDemographics FD
-- JOIN dbo.DimRegion DR ON FD.region_id = DR.region_id
-- WHERE DR.region_name = N'重庆市'
--   AND FD.date_key = '2023-12-31';


-- -- 1.3查询一个区域指定年份的生产总值同比增长率
-- WITH gdp_cte AS (
--     SELECT
--         r.region_name,
--         t.year,
--         SUM(g.gdp_value) AS total_gdp
--     FROM dbo.FactGDP g
--     JOIN dbo.DimRegion r ON g.region_id = r.region_id
--     JOIN dbo.DimTime t ON g.date_key = t.date_key
--     WHERE r.region_name = N'重庆市'
--       AND t.year IN (2009, 2010)
--     GROUP BY r.region_name, t.year
-- )
-- SELECT
--     MAX(CASE WHEN year = 2009 THEN total_gdp END) AS gdp_2009,
--     MAX(CASE WHEN year = 2010 THEN total_gdp END) AS gdp_2010,
--     (MAX(CASE WHEN year = 2010 THEN total_gdp END) - MAX(CASE WHEN year = 2009 THEN total_gdp END)) * 100.0 /
--     MAX(CASE WHEN year = 2009 THEN total_gdp END) AS yoy_growth_rate
-- FROM gdp_cte;

-- -- 1.4查询在指定时间段的某个区域的生产总值环比增长率。
-- WITH monthly_gdp AS (
--     SELECT
--         t.year_month,
--         t.date_key,
--         SUM(f.gdp_value) AS total_gdp,
--         ROW_NUMBER() OVER (ORDER BY t.date_key) AS rn
--     FROM dbo.FactGDP f
--     JOIN dbo.DimTime t ON f.date_key = t.date_key
--     JOIN dbo.DimRegion r ON f.region_id = r.region_id
--     WHERE r.region_name = N'重庆市'
--     GROUP BY t.date_key, t.year_month
--     HAVING t.date_key BETWEEN '2022-01-31' AND '2023-12-31'
-- ),
-- joined AS (
--     SELECT
--         curr.year_month AS curr_month,
--         prev.total_gdp AS prev_gdp,
--         curr.total_gdp AS curr_gdp,
--         (curr.total_gdp - prev.total_gdp) * 100.0 / NULLIF(prev.total_gdp, 0) AS mom_growth
--     FROM monthly_gdp curr
--     JOIN monthly_gdp prev ON curr.rn = prev.rn + 1
-- )
-- SELECT * FROM joined;

-- -- 1.5查询指定时间段各区域的人均GDP值和排名，并且将结果存储在数据库中。
-- WITH per_capita AS (
--     SELECT
--         f.region_id,
--         f.date_key,
--         SUM(f.gdp_value) / NULLIF(MAX(d.population), 0) AS per_capita_gdp
--     FROM dbo.FactGDP f
--     JOIN dbo.FactDemographics d ON f.region_id = d.region_id AND f.date_key = d.date_key
--     WHERE f.date_key = '2020-12-31'
--     GROUP BY f.region_id, f.date_key
-- ),
-- ranked AS (
--     SELECT *,
--         RANK() OVER (ORDER BY per_capita_gdp DESC) AS rank_in_date
--     FROM per_capita
-- )
-- INSERT INTO dbo.Result_PerCapitaGDP_Ranking(region_id, date_key, per_capita_gdp, rank_in_date)
-- SELECT
--     region_id,
--     date_key,
--     per_capita_gdp,
--     rank_in_date
-- FROM ranked;


-- -- 1.6 分析比较指定时间段我国东部、西部、中部、东北部地区出口对该区域GDP的贡献率，以及判断贡献率是高于全国平均值，还是等于或低于平均值。将结果存储在数据库中。
-- DECLARE @from_date DATE = '2010-01-01';
-- DECLARE @to_date DATE = '2020-12-31';

-- -- 第一步：全国 GDP 与 出口总额
-- WITH NationalTotal AS (
--     SELECT
--         SUM(g.gdp_value) AS total_gdp,
--         SUM(t.exports_value) AS total_exports
--     FROM dbo.FactGDP g
--     JOIN dbo.FactTrade t ON g.region_id = t.region_id AND g.date_key = t.date_key
--     WHERE t.date_key BETWEEN @from_date AND @to_date
-- ),
-- AvgContribution AS (
--     SELECT
--         CAST(total_exports AS FLOAT) / NULLIF(total_gdp, 0) AS avg_contribution
--     FROM NationalTotal
-- ),

-- -- 第二步：每个大区的 GDP 与 出口总额（通过省份汇总）
-- RegionGroupTotal AS (
--     SELECT
--         brg.region_group_id,
--         SUM(g.gdp_value) AS total_gdp,
--         SUM(t.exports_value) AS total_exports
--     FROM dbo.DimRegion r
--     JOIN dbo.Bridge_Region_Group brg ON r.region_id = brg.region_id
--     JOIN dbo.FactGDP g ON g.region_id = r.region_id
--     JOIN dbo.FactTrade t ON t.region_id = r.region_id AND t.date_key = g.date_key
--     WHERE r.region_level = 2  -- 只聚合省级单位
--       AND t.date_key BETWEEN @from_date AND @to_date
--     GROUP BY brg.region_group_id
-- )

-- -- 第三步：插入分析结果
-- INSERT INTO dbo.Result_ExportContribution (
--     region_group_id, date_from, date_to, contribution, compare_flag, created_at
-- )
-- SELECT
--     r.region_group_id,
--     @from_date,
--     @to_date,
--     CAST(r.total_exports AS FLOAT) / NULLIF(r.total_gdp, 0) AS contribution,
--     CASE
--         WHEN CAST(r.total_exports AS FLOAT) / NULLIF(r.total_gdp, 0) > a.avg_contribution THEN '>'
--         WHEN CAST(r.total_exports AS FLOAT) / NULLIF(r.total_gdp, 0) = a.avg_contribution THEN '='
--         ELSE '<'
--     END AS compare_flag,
--     SYSUTCDATETIME()
-- FROM RegionGroupTotal r
-- CROSS JOIN AvgContribution a;

-- 1.7 比较最近二十年中美贸易总额增长率变化趋势与我国GDP变化趋势。
-- 步骤：先按年汇总中美贸易总额与全国 GDP
-- 提取 2004–2023 每年中国对美国的进出口总额（贸易总额）；
-- 提取 2004–2023 每年全国 GDP 总额；
-- 计算这两个指标的同比增长率；
-- 并列输出用于趋势对比。
-- WITH YearlyUSATrade AS (
--     SELECT
--         t1.year,
--         SUM(f.exports_value + f.imports_value) AS usa_trade_total
--     FROM dbo.FactTrade f
--     JOIN dbo.DimTime t1 ON f.date_key = t1.date_key
--     WHERE f.partner_country_id = 1
--       AND t1.year BETWEEN 2004 AND 2023
--     GROUP BY t1.year
-- ),
-- YearlyGDP AS (
--     SELECT
--         t2.year,
--         SUM(g.gdp_value) AS china_gdp_total
--     FROM dbo.FactGDP g
--     JOIN dbo.DimTime t2 ON g.date_key = t2.date_key
--     WHERE g.region_id = 1
--       AND t2.year BETWEEN 2004 AND 2023
--     GROUP BY t2.year
-- ),
-- Combined AS (
--     SELECT
--         t.year,
--         t.usa_trade_total,
--         g.china_gdp_total,
--         LAG(t.usa_trade_total) OVER (ORDER BY t.year) AS prev_trade,
--         LAG(g.china_gdp_total) OVER (ORDER BY t.year) AS prev_gdp
--     FROM YearlyUSATrade t
--     JOIN YearlyGDP g ON t.year = g.year
-- )
-- -- 输出增长率对比
-- SELECT
--     year,
--     usa_trade_total,
--     china_gdp_total,
--     ROUND((usa_trade_total - prev_trade) * 100.0 / NULLIF(prev_trade, 0), 2) AS usa_trade_yoy,
--     ROUND((china_gdp_total - prev_gdp) * 100.0 / NULLIF(prev_gdp, 0), 2) AS gdp_yoy
-- FROM Combined
-- ORDER BY year;

